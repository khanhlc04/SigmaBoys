import os
import json
from typing import Dict, Any
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage
from pydantic import SecretStr
from app.core.config import settings
from app.models.environmental_quality import EnvironmentalQuality

# Load environment variables
load_dotenv()

class EnvironmentalAIService:
    """Service s·ª≠ d·ª•ng OpenAI th√¥ng qua LangChain ƒë·ªÉ ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng"""
    
    def __init__(self):
        # Load .env file
        load_dotenv()
        
        # L·∫•y OpenAI key t·ª´ environment
        openai_key = os.getenv("OPENAI_API_KEY")
        if not openai_key:
            raise ValueError("C·∫ßn OPENAI_API_KEY trong environment variables (.env file)")
        
        print(f"‚úì OpenAI key loaded: {openai_key[:10]}...{openai_key[-4:]}")
        
        # T·∫°o ChatOpenAI instance
        self.llm = ChatOpenAI(
            model='gpt-4o-mini',
            temperature=0,
            api_key=SecretStr(openai_key)
        )
        print("‚úì ChatOpenAI initialized successfully")
    
    async def analyze_environment(self, location_data: Dict[str, Any], env_data: Dict[str, Any]) -> EnvironmentalQuality:
        """
        Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng b·∫±ng AI
        """
        
        try:
            print(f"üîç Input data - Location: {location_data}")
            print(f"üîç Input data - Environment keys: {list(env_data.keys()) if env_data else 'None'}")
            
            # Validate input data
            if not location_data:
                location_data = {"city": "Unknown", "country": "Unknown", "lat": 0, "lon": 0}
            if not env_data:
                env_data = {}
            
            # T·∫°o prompt ƒë·ªÉ AI ph√¢n t√≠ch
            prompt = self._create_analysis_prompt(location_data, env_data)
            
            # Validate prompt
            if not prompt or prompt.strip() == "":
                raise ValueError("Generated prompt is empty")
            
            print("Sending request to OpenAI...")
            print(f"Prompt length: {len(prompt)} characters")
            print(f"Prompt preview: {prompt[:200]}...")
            
            # G·ªçi OpenAI v·ªõi validation
            message = HumanMessage(content=prompt)
            response = await self.llm.ainvoke([message])
            
            print("‚úì Response received from OpenAI")
            
            # Parse k·∫øt qu·∫£
            content = str(response.content) if hasattr(response, 'content') else str(response)
            result = self._parse_ai_response(content)
            
            return EnvironmentalQuality(**result)
            
        except Exception as e:
            print(f"AI Analysis Error: {str(e)}")
            print(f"Error type: {type(e)}")
            # Fallback n·∫øu AI l·ªói
            return self._create_fallback_assessment(str(e))
    
    def _create_analysis_prompt(self, location_data: Dict[str, Any], env_data: Dict[str, Any]) -> str:
        """T·∫°o prompt chi ti·∫øt cho AI"""
        
        try:
            # Format location info
            city = location_data.get('city', 'Unknown') if location_data else 'Unknown'
            country = location_data.get('country', 'Unknown') if location_data else 'Unknown'
            lat = location_data.get('lat', 0) if location_data else 0
            lon = location_data.get('lon', 0) if location_data else 0
            
            location_str = f"V·ªã tr√≠: {city}, {country} ({lat}, {lon})"
            
            # Format environmental data
            data_summary = []
            
            # Weather data
            if env_data and 'weather' in env_data and env_data['weather']:
                weather = env_data['weather']
                data_summary.append(f"Th·ªùi ti·∫øt: {weather.get('temperature', 'N/A')}¬∞C, ƒë·ªô ·∫©m {weather.get('humidity', 'N/A')}%, {weather.get('description', 'N/A')}")
            
            # Air quality data
            if env_data and 'air' in env_data and env_data['air']:
                air = env_data['air']
                data_summary.append(f"Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠: AQI {air.get('aqi', 'N/A')}, PM2.5: {air.get('pm25', 'N/A')} Œºg/m¬≥, M·ª©c ƒë·ªô: {air.get('quality_level', 'N/A')}")
            
            # Water quality data
            if env_data and 'water' in env_data and env_data['water']:
                water = env_data['water']
                data_summary.append(f"Ch·∫•t l∆∞·ª£ng n∆∞·ªõc: pH {water.get('ph', 'N/A')}, DO {water.get('dissolved_oxygen', 'N/A')} mg/L, M·ª©c ƒë·ªô: {water.get('quality_level', 'N/A')}")
            
            # Noise data
            if env_data and 'noise' in env_data and env_data['noise']:
                noise = env_data['noise']
                noise_level = noise.get('level', noise.get('level_db', 'N/A'))
                data_summary.append(f"Ti·∫øng ·ªìn: {noise_level} dB, M·ª©c ƒë·ªô: {noise.get('quality_level', 'N/A')}")
            
            # Soil data
            if env_data and 'soil' in env_data and env_data['soil']:
                soil = env_data['soil']
                data_summary.append(f"ƒê·∫•t: pH {soil.get('ph', 'N/A')}, ƒë·ªô ·∫©m {soil.get('moisture', 'N/A')}%")
            
            # Radiation data
            if env_data and 'radiation' in env_data and env_data['radiation']:
                radiation = env_data['radiation']
                data_summary.append(f"B·ª©c x·∫°: {radiation.get('level', 'N/A')} ŒºSv/h, M·ª©c ƒë·ªô: {radiation.get('quality_level', 'N/A')}")
            
            data_text = "\n".join(data_summary) if data_summary else "Kh√¥ng c√≥ d·ªØ li·ªáu m√¥i tr∆∞·ªùng chi ti·∫øt"
            
            # T·∫°o prompt ho√†n ch·ªânh
            prompt = f"""
B·∫°n l√† chuy√™n gia m√¥i tr∆∞·ªùng. H√£y ph√¢n t√≠ch d·ªØ li·ªáu m√¥i tr∆∞·ªùng sau v√† ƒë∆∞a ra ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng:

{location_str}

D·ªÆ LI·ªÜU M√îI TR∆Ø·ªúNG:
{data_text}

H√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON v·ªõi format sau:
{{
    "overall_rating": "excellent|good|moderate|poor|hazardous",
    "score": [s·ªë t·ª´ 0-100],
    "health_risk": "low|moderate|high|severe",
    "summary": "T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng",
    "recommendations": ["danh s√°ch khuy·∫øn ngh·ªã"],
    "concerns": ["danh s√°ch nh·ªØng lo ng·∫°i"],
    "ai_reasoning": "Gi·∫£i th√≠ch chi ti·∫øt v·ªÅ c√°ch ƒë√°nh gi√°"
}}

L∆∞u √Ω:
- D·ª±a tr√™n WHO v√† EPA standards
- AQI >100 l√† kh√¥ng t·ªët, >200 l√† nguy hi·ªÉm
- PM2.5 >35 Œºg/m¬≥ l√† v∆∞·ª£t chu·∫©n WHO
- pH n∆∞·ªõc n√™n trong kho·∫£ng 6.5-8.5
- Ti·∫øng ·ªìn >55dB ng√†y, >40dB ƒë√™m l√† c√≥ h·∫°i
- ƒê∆∞a ra khuy·∫øn ngh·ªã th·ª±c t·∫ø v√† h·ªØu √≠ch
"""
            
            result = prompt.strip()
            print(f"‚úì Prompt created successfully, length: {len(result)}")
            return result
            
        except Exception as e:
            print(f"Error creating prompt: {str(e)}")
            # Tr·∫£ v·ªÅ prompt fallback
            return f"""
Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng m√¥i tr∆∞·ªùng cho v·ªã tr√≠ {location_data.get('city', 'Unknown') if location_data else 'Unknown'}.

H√£y tr·∫£ v·ªÅ JSON format:
{{
    "overall_rating": "moderate",
    "score": 50,
    "health_risk": "moderate",
    "summary": "Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch chi ti·∫øt",
    "recommendations": ["C·∫ßn thu th·∫≠p th√™m d·ªØ li·ªáu m√¥i tr∆∞·ªùng"],
    "concerns": ["Thi·∫øu th√¥ng tin m√¥i tr∆∞·ªùng"],
    "ai_reasoning": "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng ƒë·∫ßy ƒë·ªß"
}}
"""
    
    def _parse_ai_response(self, ai_response: str) -> Dict[str, Any]:
        """Parse response t·ª´ AI th√†nh dict"""
        try:
            # Lo·∫°i b·ªè markdown n·∫øu c√≥
            clean_response = ai_response.strip()
            if clean_response.startswith("```json"):
                clean_response = clean_response[7:]
            if clean_response.endswith("```"):
                clean_response = clean_response[:-3]
            
            # Parse JSON
            result = json.loads(clean_response.strip())
            
            # Validate v√† set default values
            result.setdefault("overall_rating", "moderate")
            result.setdefault("score", 50.0)
            result.setdefault("health_risk", "moderate")
            result.setdefault("summary", "ƒê√°nh gi√° m√¥i tr∆∞·ªùng b·∫±ng AI")
            result.setdefault("recommendations", [])
            result.setdefault("concerns", [])
            result.setdefault("ai_reasoning", "Ph√¢n t√≠ch d·ª±a tr√™n d·ªØ li·ªáu m√¥i tr∆∞·ªùng")
            
            return result
            
        except Exception as e:
            print(f"Parse error: {str(e)}")
            print(f"AI Response: {ai_response[:500]}...")
            # N·∫øu parse l·ªói, tr·∫£ v·ªÅ default
            return {
                "overall_rating": "moderate",
                "score": 50.0,
                "health_risk": "moderate", 
                "summary": f"L·ªói parse AI response: {str(e)}",
                "recommendations": ["Ki·ªÉm tra l·∫°i d·ªØ li·ªáu m√¥i tr∆∞·ªùng"],
                "concerns": ["Kh√¥ng th·ªÉ ph√¢n t√≠ch ch√≠nh x√°c"],
                "ai_reasoning": f"AI response parsing error: {ai_response[:200]}..."
            }
    
    def _create_fallback_assessment(self, error: str) -> EnvironmentalQuality:
        """T·∫°o ƒë√°nh gi√° d·ª± ph√≤ng khi AI l·ªói"""
        return EnvironmentalQuality(
            overall_rating="moderate",
            score=50.0,
            health_risk="moderate",
            summary="Kh√¥ng th·ªÉ k·∫øt n·ªëi AI ƒë·ªÉ ph√¢n t√≠ch",
            recommendations=["Th·ª≠ l·∫°i sau", "Ki·ªÉm tra k·∫øt n·ªëi internet"],
            concerns=["L·ªói h·ªá th·ªëng AI"],
            ai_reasoning=f"Service error: {error}"
        )

# Singleton instance
environmental_ai_service = EnvironmentalAIService()